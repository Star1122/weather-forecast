import React, { useCallback, useState } from 'react'
import Head from 'next/head'
import Button from 'react-bootstrap/Button'
import Form from 'react-bootstrap/Form'

import styles from '@/styles/Home.module.css'

interface IWeather {
  date: string
  day: any
}

export default function Home() {
  const [weatherData, setWeatherData] = useState<IWeather[]>([])

  const handleSubmit = useCallback(async (e: React.SyntheticEvent) => {
    e.preventDefault()

    const target = e.target as typeof e.target & {
      location: { value: string }
    }

    const location = target.location.value
    if (location) {
      const response = await fetch(`/api/weather?location=${location}`)
      const data = await response.json()
      setWeatherData(data)
    }
  }, [])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Form onSubmit={handleSubmit}>
          <Form.Group className="mb-3" controlId="location">
            <Form.Label>Location</Form.Label>
            <Form.Control type="text" placeholder="Location" />
          </Form.Group>

          <Button variant="primary" type="submit">
            Get Weather
          </Button>
        </Form>

        <div className={styles.container}>
          {weatherData.map((weather: IWeather) => (
            <div className={styles.card} key={weather.date}>
              <p>{weather.date}</p>

              <div className={styles.flexRow}>
                <img src={weather.day.condition.icon} alt="weather" />
                <h2>{weather.day.avgtemp_c}Â°C</h2>
              </div>

              <div className={styles.flexRow}>
                <span>Humidity: {weather.day.avghumidity}%</span>
                <span>Precipitation: {weather.day.totalprecip_mm}mm</span>
              </div>
              <div className={styles.flexRow}>
                <span>Wind: {(weather.day.maxwind_kph * 1000 / 3600).toFixed(2)}m/s</span>
                <span>Visibility: {weather.day.avgvis_km}km</span>
              </div>
            </div>
          ))}
        </div>
      </main>
    </>
  )
}
